##Facilitates booking movie ticket
Allows cusomters to browse list of movies, select seats, book tickets on payment.


UML Diagram, LLD

Design Questions
1. how to handle concurrency such that no 2 users book the same seat
We can use transactions in SQL databases to avoid any clashes.
For example, if we are using SQL server we can utilize Transaction Isolation Levels
to lock the rows before we update them. Note: within a transaction, if we read rows
we get a write-lock on them so that they canâ€™t be updated by anyone else.
////////////////////////////////////////////
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

BEGIN TRANSACTION;

    -- Suppose we intend to reserve three seats (IDs: 54, 55, 56) for ShowID=99
    Select * From ShowSeat where ShowID=99 && ShowSeatID in (54, 55, 56) && isReserved=0

    -- if the number of rows returned by the above statement is NOT three, we can return failure to the user.
    update ShowSeat table...
    update Booking table ...

COMMIT TRANSACTION;

//////////////////////////////////////////////

Once the above database transaction is successful, we can safely assume that the reservation
has been marked successfully and no two customers will be able to reserve the same seat.